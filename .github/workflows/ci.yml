name: CI

on:
  # Run on every commit in a PR, in any branch
  pull_request:
    branches:

  workflow_dispatch:

  # Run when a commit has been made on the primary branch, which should be after a PR
  push:
    branches: [ "master" ]

env:
  CI: true
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false"
  CACHE_VERSION: 1 # Increment this to invalidate the cache.
  JAVA_VERSION: 19
  JDK_DIST: 'corretto'
  ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_USERNAME }}
  ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_PASSWORD }}

jobs:
  checks:
    name: Run checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JDK_DIST }}

      - name: Enable execution
        run: |
          chmod +x ./gradlew
          chmod +x ./*.sh

      - name: Clear cache
        run: ./ci_clear_gradle_cache.sh

      - name: Get cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ env.CACHE_VERSION }}-${{ hashFiles('**/**.gradle.kts', '**/gradle/wrapper/gradle-wrapper.properties', '**/libs.versions.toml') }}

      - name: Validate gradle
        uses: gradle/wrapper-validation-action@v1

      - name: Run checks
        run: ./gradlew runChecks

      - name: Assemble
        run: ./gradlew assemble

      - name: Upload reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: check-reports
          path: ./*/build/reports
          if-no-files-found: warn

  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JDK_DIST }}

      - name: Enable execution
        run: |
          chmod +x ./gradlew
          chmod +x ./*.sh

      - name: Clear cache
        run: ./ci_clear_gradle_cache.sh

      - name: Get cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ env.CACHE_VERSION }}-${{ hashFiles('**/**.gradle.kts', '**/gradle/wrapper/gradle-wrapper.properties', '**/libs.versions.toml') }}

      - name: Run unit tests
        run: ./gradlew koverMergedHtmlReport

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports-unit
          path: ./*/build/reports
          if-no-files-found: warn

  instrumentation-tests:
    name: Instrumentation tests
    runs-on: macOS-latest
    timeout-minutes: 45
    strategy:
      fail-fast: true
      matrix:
        # API 21 is flaky and times out.
        api-level: [ 22, 26, 31 ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JDK_DIST }}

      - name: Enable execution
        run: |
          chmod +x ./gradlew
          chmod +x ./*.sh

      - name: Clear cache
        run: ./ci_clear_gradle_cache.sh

      - name: Get cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ env.CACHE_VERSION }}-${{ hashFiles('**/**.gradle.kts', '**/gradle/wrapper/gradle-wrapper.properties', '**/libs.versions.toml') }}

      # API 30+ emulators only have x86_64 system images.
      - name: Get AVD info
        uses: ./.github/actions/get-avd-info
        id: avd-info
        with:
          api-level: ${{ matrix.api-level }}

      - name: Retrieve cached AVD snapshot
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: ${{ runner.os }}-avd-${{ env.CACHE_VERSION }}-${{ steps.avd-info.outputs.arch }}-${{ steps.avd-info.outputs.target }}-${{ matrix.api-level }}

      # Create a new emulator snapshot if it isn't present in the cache.
      - name: Create AVD snapshot
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ steps.avd-info.outputs.arch }}
          target: ${{ steps.avd-info.outputs.target }}
          disable-animations: false
          force-avd-creation: false
          ram-size: 4096M
          emulator-boot-timeout: 12000
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: echo "Generated AVD snapshot."

      - name: Run instrumented tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ steps.avd-info.outputs.arch }}
          target: ${{ steps.avd-info.outputs.target }}
          disable-animations: true
          force-avd-creation: false
          ram-size: 4096M
          emulator-boot-timeout: 12000
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-snapshot-save
          script: mv .github/debug.keystore ~/.android; ./gradlew connectedDebugAndroidTest

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports-instrumented
          path: ./*/build/reports
          if-no-files-found: warn

  deploy-snapshot:
    name: Deploy snapshot
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.repository == 'jonapoul/alakazam' && github.ref == 'refs/heads/main'
    needs: [ checks, unit-tests, instrumentation-tests ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JDK_DIST }}

      - name: Enable execution
        run: |
          chmod +x ./gradlew
          chmod +x ./*.sh

      - name: Publush snapshot
        run: ./gradlew publish

  deploy-docs:
    name: Deploy docs
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.repository == 'jonapoul/alakazam' && github.ref == 'refs/heads/main'
    needs: [ checks, unit-tests, instrumentation-tests ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: 'true'

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JDK_DIST }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Enable execution
        run: |
          chmod +x ./gradlew
          chmod +x ./*.sh

      - name: Deploy Docs
        run: |
          git config user.name 'github-actions[bot]' && git config user.email 'github-actions[bot]@users.noreply.github.com'
          pip3 install --upgrade pip && pip3 install mkdocs-material mkdocs-material-extensions mkdocs-minify-plugin
          ./deploy_docs.sh
